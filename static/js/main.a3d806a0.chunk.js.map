{"version":3,"sources":["components/AlbumList.js","serviceWorker.js","index.js","App.js"],"names":["AlbumList","props","react_default","a","createElement","Container","fluid","Row","className","Col","sm","datamusic","map","m","key","id","src","album","cover_big","alt","title","controls","preview","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","artistname","ArtistName","_useState3","_useState4","artistdata","setArtistData","_useState5","_useState6","req","setReq","searchAlbum","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api","wrap","_context","prev","next","preventDefault","axios","method","url","concat","headers","X-RapidAPI-Host","X-RapidAPI-Key","sent","data","status","stop","_x","apply","this","arguments","Fragment","index_es","icon","faMusic","size","spin","Form","onSubmit","Input","name","type","value","placeholder","onChange","target","Button","color","Spinner","style","width","height","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3d806a0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/albumlist.css\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nexport default function AlbumList(props) {\n  return (\n    <Container fluid>\n      <Row className=\"mt-4\">\n        <Col sm=\"12\">\n          <div className=\"music-div\">\n            {props.datamusic.map(m => (\n              <div key={m.id} className=\"album-div\">\n                <img\n                  src={m.album.cover_big}\n                  alt=\"album cover\"\n                  className=\"img-fluid album-cover\"\n                  title={m.title}\n                />\n                <section className=\"tools-play audio-zone\">\n                  <audio controls src={m.preview} title=\"Start preview\"/>\n                </section>\n              </div>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\nimport { Form, Input, Button, Container, Row, Col, Spinner } from \"reactstrap\";\nimport \"./components/styles/searchartist.css\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport AlbumList from \"./components/AlbumList\";\n\nexport default function App() {\n  const [artistname, ArtistName] = useState(\"\");\n  const [artistdata, setArtistData] = useState([]);\n  const [req, setReq] = useState(0);\n\n  const handleArtistName = e => {\n    ArtistName(e.target.value);\n  };\n\n  const searchAlbum = async e => {\n    e.preventDefault();\n    const api = await axios({\n      method: \"GET\",\n      url: `https://deezerdevs-deezer.p.rapidapi.com/search?q=${artistname}`,\n      headers: {\n        \"X-RapidAPI-Host\": \"deezerdevs-deezer.p.rapidapi.com\",\n        \"X-RapidAPI-Key\": \"rbuVFEFqf7mshEu9T3FimKegzCj2p1ZFN2rjsnzRO421Q2DgSk\"\n      }\n    });\n    setArtistData(api.data.data);\n    setReq(api.status);\n  };\n  return (\n    <>\n      <Container fluid>\n        <Row>\n          <Col sm=\"12\" className=\"search-artist\">\n            <div className=\"title-form\">\n              <FontAwesomeIcon icon={faMusic} size=\"3x\" spin />\n              <h1 className=\"h1-responsive mx-3\">Music master</h1>\n            </div>\n            <Form\n              className=\"form-search\"\n              onSubmit={artistname !== \"\" ? searchAlbum : \"\"}\n            >\n              <Input\n                name=\"artistname\"\n                type=\"text\"\n                value={artistname}\n                placeholder=\"Artist name\"\n                onChange={handleArtistName}\n              />\n              <Button color=\"primary\" type=\"submit\" className=\"mx-1\">\n                Search\n              </Button>\n            </Form>\n            <i className=\"\">Search your artist and listen the music !</i>\n          </Col>\n        </Row>\n      </Container>\n      <Container className=\"container-spinner mt-5\">\n        <Row>\n          <Col sm=\"12\">\n            {req !== 200 ? (\n              <Spinner\n                color=\"info\"\n                type=\"border\"\n                style={{ width: \"8rem\", height: \"8rem\" }}\n              />\n            ) : (\n              \"\"\n            )}\n          </Col>\n        </Row>\n      </Container>\n      <AlbumList datamusic={artistdata} />\n    </>\n  );\n}\n"],"sourceRoot":""}